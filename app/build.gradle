import groovy.xml.MarkupBuilder;

apply plugin: 'com.android.application'

def twaManifest = [
        applicationId              : 'com.sopan.trusted.web',
        hostName                   : 'fir-rtdb-1654a.firebaseapp.com', // The domain being opened in the TWA.
        launchUrl                  : '/', // The start path for the TWA. Must be relative to the domain.
        name                       : 'Trusted Web', // The name shown on the Android Launcher.
        themeColor                 : '#303F9F', // The color used for the status bar.
        navigationColor            : '#303F9F', // The color used for the navigation bar.
        backgroundColor            : '#bababa', // The color used for the splash screen background.
        enableNotifications        : false, // Set to true to enable notification delegation.
        // Add shortcuts for your app here. Every shortcut must include the following fields:
        // - name: String that will show up in the shortcut.
        // - short_name: Shorter string used if |name| is too long.
        // - url: Absolute path of the URL to launch the app with (e.g '/create').
        // - icon: Name of the resource in the drawable folder to use as an icon.
        shortcuts                  : [
                // Insert shortcuts here, for example:
                // [name: 'Open SVG', short_name: 'Open', url: '/open', icon: 'splash']
        ],
        // The duration of fade out animation in milliseconds to be played when removing splash screen.
        splashScreenFadeOutDuration: 500
]

android {
    compileSdkVersion 33
    defaultConfig {
        applicationId twaManifest.applicationId
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 3
        versionName "2.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // The name for the application on the Android Launcher
        resValue "string", "appName", twaManifest.name

        // The URL that will be used when launching the TWA from the Android Launcher
        def launchUrl = "https://" + twaManifest.hostName + twaManifest.launchUrl
        resValue "string", "launchUrl", launchUrl

        // The URL that will be opened as a Desktop PWA when the TWA is installed and
        // run on ChromeOS. This will probably give a better user experience for non-mobile
        // devices, but will not include any platform-specific Android interaction.
        resValue "string", "crosLaunchUrl", launchUrl

        // The hostname is used when building the intent-filter, so the TWA is able to
        // handle Intents to open https://svgomg.firebaseapp.com.
        resValue "string", "hostName", twaManifest.hostName

        // This variable below expresses the relationship between the app and the site,
        // as documented in the TWA documentation at
        // https://developers.google.com/web/updates/2017/10/using-twa#set_up_digital_asset_links_in_an_android_app
        // and is injected into the AndroidManifest.xml

        resValue "string", "assetStatements", """
            [{
                "relation": ["delegate_permission/common.handle_all_urls"],
                "target": {
                    "namespace": "android_app",
                    "package_name": "com.sopan.trusted.web",
                    "sha256_cert_fingerprints": ["A7:44:B2:85:64:7E:A1:94:44:8D:46:7A:AF:00:52:55:AB:F3:CB:19:0C:CF:2D:5B:37:88:7E:2E:56:2B:D9:5C"]
                }
            }]"""

        // This attribute sets the status bar color for the TWA. It can be either set here or in
        // `res/values/colors.xml`. Setting in both places is an error and the app will not
        // compile. If not set, the status bar color defaults to #FFFFFF - white.
        resValue "color", "colorPrimary", twaManifest.themeColor

        // This attribute sets the navigation bar color for the TWA. It can be either set here or in
        // `res/values/colors.xml`. Setting in both places is an error and the app will not
        // compile. If not set, the navigation bar color defaults to #FFFFFF - white.
        resValue "color", "navigationColor", twaManifest.navigationColor

        // Sets the color for the background used for the splash screen when launching the
        // Trusted Web Activity.
        resValue "color", "backgroundColor", twaManifest.backgroundColor

        // Defines a provider authority fot the Splash Screen
        resValue "string", "providerAuthority", twaManifest.applicationId + '.fileprovider'

        // The enableNotification resource is used to enable or disable the
        // TrustedWebActivityService, by changing the android:enabled and android:exported
        // attributes
        resValue "bool", "enableNotification", twaManifest.enableNotifications.toString()

        twaManifest.shortcuts.eachWithIndex { shortcut, index ->
            resValue "string", "shortcut_name_$index", "$shortcut.name"
            resValue "string", "shortcut_short_name_$index", "$shortcut.short_name"
        }

        // The splashScreenFadeOutDuration resource is used to set the duration of fade out animation in milliseconds
        // to be played when removing splash screen. The default is 0 (no animation).
        resValue "integer", "splashScreenFadeOutDuration", twaManifest.splashScreenFadeOutDuration.toString()
    }
    buildTypes {
        release {
            minifyEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

task generateShorcutsFile {
    assert twaManifest.shortcuts.size() < 5, "You can have at most 4 shortcuts."
    twaManifest.shortcuts.eachWithIndex { s, i ->
        assert s.name != null, 'Missing `name` in shortcut #' + i
        assert s.short_name != null, 'Missing `short_name` in shortcut #' + i
        assert s.url != null, 'Missing `icon` in shortcut #' + i
        assert s.icon != null, 'Missing `url` in shortcut #' + i
    }

    def shortcutsFile = new File("$projectDir/src/main/res/xml", "shortcuts.xml")

    def xmlWriter = new StringWriter()
    def xmlMarkup = new MarkupBuilder(new IndentPrinter(xmlWriter, "    ", true))

    xmlMarkup
            .'shortcuts'('xmlns:android': 'http://schemas.android.com/apk/res/android') {
                twaManifest.shortcuts.eachWithIndex { s, i ->
                    'shortcut'(
                            'android:shortcutId': 'shortcut' + i,
                            'android:enabled': 'true',
                            'android:icon': '@drawable/' + s.icon,
                            'android:shortcutShortLabel': '@string/shortcut_short_name_' + i,
                            'android:shortcutLongLabel': '@string/shortcut_name_' + i) {
                        'intent'(
                                'android:action': 'android.intent.action.MAIN',
                                'android:targetPackage': twaManifest.applicationId,
                                'android:targetClass': 'com.google.androidbrowserhelper.trusted.LauncherActivity',
                                'android:data': 'https://' + twaManifest.hostName + s.url)
                        'categories'('android:name': 'android.intent.category.LAUNCHER')
                    }
                }
            }
    shortcutsFile.text = xmlWriter.toString() + '\n'
}

preBuild.dependsOn(generateShorcutsFile)

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:runner:1.4.0'

    implementation 'com.google.android.material:material:1.6.1'

    implementation 'androidx.browser:browser:1.4.0'
    implementation 'com.google.androidbrowserhelper:androidbrowserhelper:2.3.0'
}
